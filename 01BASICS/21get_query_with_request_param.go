package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
)

type AutoGenerated struct {
	Args struct {
		Foo string `json:"foo"`
	} `json:"args"`
	Headers struct {
		Accept                  string `json:"Accept"`
		AcceptEncoding          string `json:"Accept-Encoding"`
		AcceptLanguage          string `json:"Accept-Language"`
		Host                    string `json:"Host"`
		SecChUa                 string `json:"Sec-Ch-Ua"`
		SecChUaMobile           string `json:"Sec-Ch-Ua-Mobile"`
		SecChUaPlatform         string `json:"Sec-Ch-Ua-Platform"`
		SecFetchDest            string `json:"Sec-Fetch-Dest"`
		SecFetchMode            string `json:"Sec-Fetch-Mode"`
		SecFetchSite            string `json:"Sec-Fetch-Site"`
		SecFetchUser            string `json:"Sec-Fetch-User"`
		UpgradeInsecureRequests string `json:"Upgrade-Insecure-Requests"`
		UserAgent               string `json:"User-Agent"`
		XAmznTraceID            string `json:"X-Amzn-Trace-Id"`
	} `json:"headers"`
	Origin string `json:"origin"`
	URL    string `json:"url"`
}

func main() {
	client := &http.Client{}
	req, err := http.NewRequest(http.MethodGet, "https://httpbin.org/get", nil)
	if err != nil {
		log.Fatal(err)
	}

	// appending to existing query args
	q := req.URL.Query()
	bar := "bar"
	happy := "happy"
	param := bar + ":" + happy
	q.Add("foo", param)

	// assign encoded query string to http request
	decoded, err := url.QueryUnescape(q.Encode())
	req.URL.RawQuery = decoded
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Errored when sending request to the server")
		return
	}

	defer resp.Body.Close()
	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(resp.Status)
	fmt.Println(string(responseBody))

	res := AutoGenerated{}
	err = json.Unmarshal(responseBody, &res)
	if err != nil {
		//L.L.Error("Error while Converting JSON to Struct", L.Error(err))
		panic(err)
	}

	fmt.Println(res)
}
